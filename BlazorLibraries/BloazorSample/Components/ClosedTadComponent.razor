@inject NavigationManager NavigationManager
@implements IDisposable

<p>Tab closed sample</p>

@code {
    public int Value = 10;
    private EditContext editContext;

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += LocationChanged;

        await base.OnInitializedAsync();
    }
  

    //public void Dispose()
    //{
    //    if (editContext.IsModified())
    //    {
    //        int i = 10;
    //    }
    //}

    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
        System.Diagnostics.Debug.WriteLine($"Notified of navigation via {navigationMethod} to {e.Location}");

    }

    void IDisposable.Dispose()
    {
        // Unsubscribe from the event when our component is disposed
        NavigationManager.LocationChanged -= LocationChanged;
    }
}
