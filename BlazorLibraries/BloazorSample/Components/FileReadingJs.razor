@implements IDisposable
@inject IJSRuntime JSRuntime

<input type="file" @ref="inputFileElement" />

@code {
    ElementReference inputFileElement;
    IDisposable thisReference;
    //[Parameter]
    //public string FileStr { get; set; }
    [Parameter]
    public Func<string, Task> FileStrChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            thisReference = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeAsync<object>("blazorjs.fileReading", inputFileElement, thisReference);
        }
    }

    [JSInvokable]
    public async Task Notify(InputFile1 str)
    {
        //await FileStrChanged.Invoke(str);

        await Task.CompletedTask;

    }

    //public async Task MyMethod(string text)
    //{
    //    List<decimal> values = new List<decimal>();
    //    var _textSplited = text.Split("#");

    //    //Exchange rate
    //    foreach (var exchange in _textSplited[0..1])
    //    {
    //        decimal exRate;
    //        if (exchange.Contains("EUR"))
    //            exRate = decimal.Parse(exchange.Split(";")[^1]);
    //    }

    //    // Values
    //    foreach (var row in _textSplited[2..^0])
    //    {

    //        int i = 0;
    //        bool isNumber = false;
    //        bool isValue = false;
    //        decimal value = 0;
    //        int categoryId = 0;
    //        string[] rowstr = row.Split(";")[^2..^0];

    //        if (rowstr.Any(i => i.Contains("number")))
    //        {
    //            isNumber = true;
    //            value = int.Parse(rowstr[^1]);
    //            categoryId = int.Parse(rowstr[0].Remove(0, "number".Length));
    //        }
    //        else if (rowstr.Any(i => i.Contains("value")))
    //        {
    //            isValue = true;
    //            value = decimal.Parse(rowstr[^1]);
    //            categoryId = int.Parse(rowstr[0].Remove(0, "value".Length));
    //        }

    //        // _statistics.FirstOrDefault(i => i.CategoryId == categoryId).Value = value;
    //        values.Add(value);
    //    }


    //    await Task.CompletedTask;
    //}

    void IDisposable.Dispose()
    {
        thisReference?.Dispose();
    }
}
