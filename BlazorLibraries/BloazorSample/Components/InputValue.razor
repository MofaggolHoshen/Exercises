@inject NotifierService Notifier;
@implements IDisposable

<input value="@Value" @onchange="OnValueChanged" class="form-control" />

@if (_isInvalidFormatedValue)
{
    <span class="text-danger">@_formatErrorMegs</span>
}

@code {
    [Parameter]
    public int Value { get; set; }
    [Parameter]
    public EventCallback<int> ValueChanged { get; set; }

    private bool _isInvalidFormatedValue = false;
    private string _formatErrorMegs;
    private Guid Id;

    protected override void OnInitialized()
    {
        Notifier.Notify += OnNotify;
    }

    public void OnNotify()
    {
        _isInvalidFormatedValue = false;

        Value = 0;

        StateHasChanged();
    }

    private async void OnValueChanged(ChangeEventArgs e)
    {
        int value;

        if (!int.TryParse(e.Value.ToString(), out value))
        {
            _isInvalidFormatedValue = true;
            _formatErrorMegs = "Invalid number format.";

            return;
        }

        await ValueChanged.InvokeAsync(value);

        _isInvalidFormatedValue = false;
    }

    public void Dispose()
    {
        Notifier.Notify -= OnNotify;
    }
}
