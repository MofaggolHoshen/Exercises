<h3>Samples</h3>

@*<ChildToParentBinding @bind-InputValue="MyProperty"/>*@

@*<button @onclick="Saved">Save</button>*@

@*@code {
        public string MyProperty { get; set; }

        void Saved()
        {
            MyProperty = "This is summon.";
        }
    }*@


@*<p>ParentYear: @ParentYear</p>

    <ParentToChildBinding @bind-Year="ParentYear" />

    <button class="btn btn-primary" @onclick="ChangeTheYear">
        Change Year to 1986
    </button>*@

@*@code {
        [Parameter]
        public int ParentYear { get; set; } = 1978;

        private void ChangeTheYear()
        {
            ParentYear = 1986;
        }
    }*@

@*<ExternallyToUpdateState/>*@

<ReadingFile/>

@*@inject NotifierService Notifier;
@inject ServiceClass ClassService;

@foreach (var i in Values)
{
    <InputValue @bind-Value="i.Value" />
}

<select @onchange="OnDdlChanged">
    <option value="0">Text 1</option>
    <option value="2">Text 1</option>
    <option value="3">Text 1</option>
    <option value="4">Text 1</option>
</select>

@code{
    public List<ListItem> Values { get; set; }


    protected override void OnInitialized()
    {
        Values = ClassService.Get();
    }

    void OnDdlChanged()
    {
        Notifier.Update();

        Values = ClassService.Get();
    }
}*@

@*<FileReadingJs FileStrChanged="OnFileRead"/>*@

@code{

    async Task OnFileRead(string str)
    {
        await MyMethod(str);
    }

    public async Task MyMethod(string text)
    {
        await Task.Run(() =>
        {
            List<decimal> values = new List<decimal>();
            var _textSplited = text.Split("#");

            //Exchange rate
            foreach (var exchange in _textSplited[0..1])
            {
                decimal exRate;
                if (exchange.Contains("EUR"))
                    exRate = decimal.Parse(exchange.Split(";")[^1]);
            }

            // Values
            foreach (var row in _textSplited[2..^0])
            {
                if (!row.Contains(";"))
                    break;

                int i = 0;
                bool isNumber = false;
                bool isValue = false;
                decimal value = 0;
                int categoryId = 0;
                string[] rowstr = row.Split(";")[^2..^0];

                if (rowstr.Any(i => i.Contains("number")))
                {
                    isNumber = true;
                    value = int.Parse(rowstr[^1]);
                    categoryId = int.Parse(rowstr[0].Remove(0, "number".Length));
                }
                else if (rowstr.Any(i => i.Contains("value")))
                {
                    isValue = true;
                    value = decimal.Parse(rowstr[^1]);
                    categoryId = int.Parse(rowstr[0].Remove(0, "value".Length));
                }

                // _statistics.FirstOrDefault(i => i.CategoryId == categoryId).Value = value;
                values.Add(value);
            }
        });

    }
}